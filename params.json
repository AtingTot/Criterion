{"name":"Criterion","tagline":"A KISS, non-intrusive C test framework","body":"\r\nCriterion\r\n=========\r\n\r\n[![Build Status](https://travis-ci.org/Snaipe/Criterion.svg?branch=master)](https://travis-ci.org/Snaipe/Criterion)\r\n[![Coverage Status](https://coveralls.io/repos/Snaipe/Criterion/badge.svg?branch=master)](https://coveralls.io/r/Snaipe/Criterion?branch=master)\r\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://github.com/Snaipe/Criterion/blob/master/LICENSE)\r\n[![Version](https://img.shields.io/github/tag/Snaipe/Criterion.svg?label=version&style=flat)](https://github.com/Snaipe/Criterion/releases)\r\n\r\nA dead-simple, yet extensible, C test framework.\r\n\r\n![Screencast](https://github.com/Snaipe/Criterion/blob/bleeding/doc/screencast.gif)\r\n\r\n## Philosophy\r\n\r\nMost test frameworks for C require a lot of boilerplate code to\r\nset up tests and test suites -- you need to create a main,\r\nthen register new test suites, then register the tests within\r\nthese suits, and finally call the right functions.\r\n\r\nThis gives the user great control, at the unfortunate cost of simplicity.\r\n\r\nCriterion follows the KISS principle, while keeping the control\r\nthe user would have with other frameworks:\r\n\r\n* Tests are automatically registered when declared.\r\n* A default entry point is provided, no need to declare a main\r\n  unless you want to do special handling.\r\n* Test are isolated in their own process, crashes and signals can be\r\n  reported and tested.\r\n* Progress and statistics can be followed in real time with report hooks.\r\n\r\n## Documentation\r\n\r\nAn online documentation is available on [ReadTheDocs][online-docs]\r\n([PDF][pdf-docs] | [Zip][zip-docs] | [Epub][epub-docs])\r\n\r\n## Samples\r\n\r\nSample tests can be found in the [sample directory][samples].\r\n\r\n* [A simple test][sample-simple]\r\n* [Using multiple suites][sample-suites]\r\n* [Tests with signals][sample-signal]\r\n* [Using report hooks][sample-report]\r\n\r\n## F.A.Q.\r\n\r\n**Q. What's wrong with other test frameworks?**\r\nA. I worked with CUnit and Check, and I must say that they do their job\r\n   very well -- the only thing that bugs me is that setting up a test\r\n   suite from scratch is a pain, it should really be simpler. Most\r\n   (if not all) high-level languages have test frameworks with automatic\r\n   test registration, but all the ones for C require you to set up a\r\n   main, manually register suites, then tests. Criterion tries to\r\n   fix these shortcomings.\r\n\r\n**Q. Where has this been tested?**\r\nA. Currently, on Linux 2.6.32 and Linux 3.15.7, although it should work on\r\n   most \\*nix systems. More tests will be added on the build matrix.\r\n\r\n**Q. Will this work under Windows/MSVC?**\r\nA. Windows support with MinGW/MSVC is coming, but MSVC is a bit of a lost cause\r\n   to compile the library itself: the project internally uses c99 features and gnu\r\n   extensions.\r\n\r\n[online-docs]: http://criterion.readthedocs.org/\r\n[pdf-docs]: http://readthedocs.org/projects/criterion/downloads/pdf/latest/\r\n[zip-docs]: http://readthedocs.org/projects/criterion/downloads/htmlzip/latest/\r\n[epub-docs]: http://readthedocs.org/projects/criterion/downloads/epub/latest/\r\n\r\n[samples]: https://github.com/Snaipe/Criterion/tree/master/samples\r\n[sample-simple]: https://github.com/Snaipe/Criterion/blob/master/samples/simple.c\r\n[sample-suites]: https://github.com/Snaipe/Criterion/blob/master/samples/suites.c\r\n[sample-signal]: https://github.com/Snaipe/Criterion/blob/master/samples/signal.c\r\n[sample-report]: https://github.com/Snaipe/Criterion/blob/master/samples/report.c\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}